/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package epet;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author d4ni3
 */
public class PetFrame extends javax.swing.JFrame {

    /**
     * Creates new form petFrame
     */
    
    
    public PetFrame() {
        initComponents();
        
        
    }
    
    Pet pet = new Pet("");

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        feed = new javax.swing.JButton();
        Play = new javax.swing.JButton();
        Clean = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        PetImage = new javax.swing.JLabel();
        HungerBar = new javax.swing.JLabel();
        Cleanly = new javax.swing.JLabel();
        Sleepy = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Health = new javax.swing.JLabel();
        NameLabel = new javax.swing.JLabel();
        counterLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(700, 200));

        feed.setText("Feed");
        feed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedActionPerformed(evt);
            }
        });

        Play.setText("Play");
        Play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayActionPerformed(evt);
            }
        });

        Clean.setText("Clean");
        Clean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CleanActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        PetImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Pet1.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(PetImage)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(PetImage)
                .addGap(32, 32, 32))
        );

        HungerBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Food5.png"))); // NOI18N

        Cleanly.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Flower5.png"))); // NOI18N

        Sleepy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Empty.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        jLabel3.setText("HP:");

        Health.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Health.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/HP5.png"))); // NOI18N

        NameLabel.setText("Name");

        counterLabel.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Clean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(Cleanly, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(feed, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                    .addComponent(HungerBar))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Sleepy)
                                    .addComponent(Play, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Health, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(counterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(NameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Clean, Play, feed});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Cleanly, HungerBar, Sleepy});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Health, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(24, 24, 24))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(counterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)))
                        .addComponent(NameLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Clean)
                        .addComponent(feed, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Play, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HungerBar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(Cleanly, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Sleepy, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Clean, Play, feed});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Cleanly, HungerBar});

        if (pet.getBoredom() > 1){
            HungerBar.setText("1 b");
        }

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void feedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedActionPerformed
        pet.feed();
        pet.addCount();
        lifeHappens(pet.getBoredom(), pet.getDirty(), pet.getHunger());
        stats();
        
        update();
        
            
        
    }//GEN-LAST:event_feedActionPerformed
    public void my_update(String str){
        NameLabel.setText(str);
        pet.newName(str);
    }
    
    
    
    public void lifeHappens(int b,int d, int h){
        int thresh = 6;
        
       
        
        if (b == thresh || d == thresh || h == thresh){
            pet.dying();{
            if (pet.getLifepoints() <= 0){
                Rest rip = new Rest();
            rip.setTitle( pet.getName() + " Passed away. May it rest its soul.");
            Integer convert = pet.getCount();
            String str = convert.toString();
            rip.my_update(str);
            
            rip.show();
            dispose();
            }
        }
        
     }
         if (pet.getCount() == 15){
             pet.growUp();
             if (pet.getBoredom() <= pet.getDirty() && pet.getBoredom() <= pet.getHunger()){
                 PetImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Pet4.png ")));
                 JOptionPane.showMessageDialog(new JFrame(),pet.getName() + " just grew up!\n\nGained Two extra life Points.\nHe is very strong!", "Dialog", 1);
             } else if (pet.getDirty() < pet.getHunger() && pet.getDirty() <= pet.getBoredom()){
                 PetImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Pet2.png ")));
                 JOptionPane.showMessageDialog(new JFrame(),pet.getName() + " just grew up!\n\nGained Two extra life Points.\nIt turned into a cat..?!", "Dialog", 1);
             } else if (pet.getHunger() < pet.getDirty() && pet.getHunger() <= pet.getBoredom()){
                 PetImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Pet3.png ")));
                 JOptionPane.showMessageDialog(new JFrame(),pet.getName() + " just grew up!\n\nGained Two extra life Points.\nYou kept him too full!", "Dialog", 1);
             } else {
                 PetImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Pet5.png ")));
                 JOptionPane.showMessageDialog(new JFrame(),pet.getName() + " just grew up!\n\nGained Two extra life Points.", "Dialog", 1);
             }
            
           
        }
    }
    private void CleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CleanActionPerformed
        // TODO add your handling code here:
        pet.clean();
        pet.addCount();
        lifeHappens(pet.getBoredom(), pet.getDirty(), pet.getHunger());
        stats();
        update();
    }//GEN-LAST:event_CleanActionPerformed
    public void update(){
        Integer count = pet.getCount();
        String str = count.toString();
        counterLabel.setText(str);
        
        switch (pet.getHunger()){
                
                case 0:
                     HungerBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Food5.png ")));
                    break;
                case 1:
                     HungerBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Food4.png ")));
                    break;
                case 2:
                     HungerBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Food3.png ")));
                    break;
                case 3:
                     HungerBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Food2.png ")));
                    break;
                case 4:
                     HungerBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Food1.png ")));
                    break;
                case 5:
                     HungerBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Empty.png ")));
                    break;
                  
        }
        switch (pet.getBoredom()){
                case 0:
                     Sleepy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Empty.png ")));
                    break;
                case 1:
                     Sleepy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Sleep1.png ")));
                    break;
                case 2:
                     Sleepy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Sleep2.png ")));
                    break;
                case 3:
                     Sleepy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Sleep3.png ")));
                    break;
                case 4:
                     Sleepy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Sleep4.png ")));
                    break;
                case 5:
                     Sleepy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Sleep5.png ")));
                    break;
                   
        }
        switch (pet.getDirty()){
                case 0:
                     Cleanly.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Flower5.png ")));
                    break;
                case 1:
                     Cleanly.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Flower4.png ")));
                    break;
                case 2:
                     Cleanly.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Flower3.png ")));
                    break;
                case 3:
                     Cleanly.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Flower2.png ")));
                    break;
                case 4:
                     Cleanly.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Flower1.png ")));
                    break;
                case 5:
                     Cleanly.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/Empty.png ")));
                    break;
                  
        }
        switch (pet.getLifepoints()){
                case 1:
                    if (pet.grown){
                        Health.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/HP21.png ")));
                    } else   {
                     Health.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/HP1.png ")));
                                }
                    break;
                case 2:
                    if (pet.grown){
                        Health.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/HP22.png ")));
                    } else {
                     Health.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/HP2.png ")));
                    }
                    break;
                case 3:
                    if (pet.grown){
                         Health.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/HP23.png ")));
                    } else {
                     Health.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/HP3.png ")));
                    }
                    break;
                case 4:
                    if (pet.grown){
                        Health.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/HP24.png ")));
                    } else {
                     Health.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/HP4.png ")));
                    }
                    break;
                case 5:
                    if (pet.grown){
                        Health.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/HP25.png ")));
                    } else {
                     Health.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/HP5.png ")));
                    }
                    break;
                case 6:
                     Health.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/HP26.png ")));
                    break;
                case 7:
                     Health.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/HP27.png ")));
                    break;   
        }
        
        
        
        
        
        
    }
    private void PlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayActionPerformed
    pet.play();
    pet.addCount();
    lifeHappens(pet.getBoredom(), pet.getDirty(), pet.getHunger());
    stats();
    update();
    }//GEN-LAST:event_PlayActionPerformed
    public void stats(){
        System.out.println("bored: " + pet.getBoredom());
        System.out.println("Dirty: " +pet.getDirty());
        System.out.println("Hunger: "+pet.getHunger());
        System.out.println("HP: "+pet.getLifepoints());
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PetFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PetFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PetFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PetFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PetFrame().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clean;
    private javax.swing.JLabel Cleanly;
    private javax.swing.JLabel Health;
    private javax.swing.JLabel HungerBar;
    public javax.swing.JLabel NameLabel;
    private javax.swing.JLabel PetImage;
    private javax.swing.JButton Play;
    private javax.swing.JLabel Sleepy;
    private javax.swing.JLabel counterLabel;
    private javax.swing.JButton feed;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
